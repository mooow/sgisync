#!/usr/bin/env python3

# This file is part of SgiSync
# Copyright (C) 2017 Lorenzo Mureu <mureulor@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from sgidl import SgiDownloader
from gdrive import GoogleDrive
from sys import stderr
import re, os, json

CONF_FILE = "sgisync.conf"

class SgiSync(object):
    def __init__(self):
        self.sgidl = SgiDownloader()
        self.gdrive = GoogleDrive()

    def _extract_numbers(self, string):
        try:
            return re.findall("\d+", string)[0]
        except IndexError:
            print("[ERROR] Couldn't extract issue number from string [{0}].".format(string), file=stderr); exit(1)

    def sync(self, magazine, gd_folder):
        self.sgidl.set_magazine(magazine)
        self.sgidl.loadconf()

        if not self.sgidl.login():
            print("Login failed.")
            return

        self.sgidl.load_issues()

        path_id = self.gdrive.resolve_path(gd_folder)
        print("{0} has id [{1}]".format(gd_folder, path_id))
        if path_id is None:
            print("[ERROR] Folder {0} not found in Google Drive.".format(gd_folder), file=stderr); exit(1)

        gdfiles = sorted(list(map(self._extract_numbers, self.gdrive.list_dir(path_id))))
        print("List of files in drive://{0}: {1}".format(gd_folder, gdfiles))

        site_files = sorted(list(map(self._extract_numbers, self.sgidl.issues.keys())))
        print("List of issues on //SGI/{0}: {1}".format(magazine, site_files))

        good = []
        for issue in self.sgidl.issues:
            url = self.sgidl.issues[issue]
            number = self._extract_numbers(issue)
            #print(number)
            try:
                gdfiles.index(number)
                good.append(number)
            except ValueError:
                print("Downloading {0} from {1}".format(issue, url))
                fname = self.sgidl.download(issue)
                if fname == None: continue
                print("Uploading {0} to Google Drive".format(issue))
                self.gdrive.upload(fname, path_id)
                os.remove(fname)
        good.sort()
        print("These issues where already on gdrive:", good, "\n")



def __main():
    with open(CONF_FILE, "r") as conf_file:
        conf = json.load(conf_file)
        sgis = SgiSync()
        for item in conf.items():
            sgis.sync(*item)
if __name__ == "__main__":
    __main()
